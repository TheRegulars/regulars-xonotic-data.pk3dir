#pragma once

#include "../gamemode.qh"

#define autocvar_g_keyhunt_point_limit cvar("g_keyhunt_point_limit")
int autocvar_g_keyhunt_point_leadlimit;
bool autocvar_g_keyhunt_team_spawns;
void kh_Initialize();

REGISTER_MUTATOR(kh, false)
{
	MUTATOR_ONADD
	{
		if (time > 1) // game loads at time 1
			error("This is a game type and it cannot be added at runtime.");
		kh_Initialize();

		ActivateTeamplay();
		SetLimits(autocvar_g_keyhunt_point_limit, autocvar_g_keyhunt_point_leadlimit, autocvar_timelimit_override, -1);
		if (autocvar_g_keyhunt_team_spawns)
			have_team_spawns = -1; // request team spawns
	}

	MUTATOR_ONROLLBACK_OR_REMOVE
	{
		// we actually cannot roll back kh_Initialize here
		// BUT: we don't need to! If this gets called, adding always
		// succeeds.
	}

	MUTATOR_ONREMOVE
	{
		LOG_INFO("This is a game type and it cannot be removed at runtime.");
		return -1;
	}

	return 0;
}

#define FOR_EACH_KH_KEY(v) for(v = kh_worldkeylist; v; v = v.kh_worldkeynext )

// ALL OF THESE should be removed in the future, as other code should not have to care

// used by bots:
bool kh_tracking_enabled;
.entity kh_next;

USING(kh_Think_t, void());
void kh_StartRound();
void kh_Controller_SetThink(float t, kh_Think_t func);
